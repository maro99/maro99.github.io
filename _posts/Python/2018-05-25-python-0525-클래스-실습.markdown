---
layout: "post"
title: "Python 0525 클래스 실습"
categories:
 - Python
tags:
 - Python
 - class  
comments : true
date: "2018-05-25 00:17"
---



1. 일상생활에서 접할 수 있는 서로 연관되는 어떠한 것들에 대하여 3개의 클래스를 만들고, 각각에게 영향을 줄 수 있는 메서드를 만들고 사용해서 다른 인스턴스의 속성에 영향을 주는 코드를 작성해본다.
ex) 사람 클래스와 고양이 클래스 -> 사람이 '먹이준다' 메서드 실행 시 고양이 인스턴스를 전달, 고양이 인스턴스의 포만감을 +<br>

2. 외부에서 조작하면 문제가 생길 수 있는 속성을 private하게 지정되도록 이름을 바꾸고, property를 만들어 본다. setter가 필요없는 속성은 읽기전용으로 남겨두며, 변경해야 하는 속성은 setter를 구현하고 제한조건을 만든다
ex) 음식을 먹고 포만감을 늘리는 메서드 -> 포만감이 100이상이면 먹지 않도록

(setter가 없으면 읽기전용이다.  
동적으로 작동한다는 것은 서로 관련 전혀 없는 함수들 가지고 있는데 사용할 수 있는것.)



### 1번

```bash
# 탄창 magazine-->
# 스코프 scope  -->

class Gun:
    def __init__(self,name):
        self.name=name
        self.amo=10#30bullet per every magzine
        self.maximum_range=1#1km
        self.hit_ratio=100#per every 100 bullet
        self.rpm=100 #rate of fire per min

    def reload(self,magazine):
        magazine.reloading(self)
        print(f'reloaded! amo  now  : {self.amo}')

    def shooting(self):
        if self.amo>0:
            self.amo-=1
            print(f'lets burn ! amo  now  : {self.amo}')
        else:
            print('please reload  Magazines')


    def equip(self,item):
        item.use(self)
        print(f'ratio changed !  now  maximum_range : {self.maximum_range} km')

    def __repr__(self):
        return (f'{self.name} (amo:{self.amo} ,maximum_range: {self.maximum_range} km'
                f',hit_ratio: {self.hit_ratio} per 100 bullert, rpm: {self.rpm} per min)'

    )


class Magazines:
    def reloading(self,gun):
        gun.amo+=30

class Scope:
    def use(self,gun):
        gun.maximum_range+=1
        gun.hit_ratio+=5
        gun.rpm-=5




```








### 2번
```bash
# 총( 속성 잔탄량amo  0발~, 사거리 1배 maximun_range , 명중률+ hit_ratio ,연사 - ~ rpm
#)---> reload, arrange(1~10) , shoot
# 탄창 magazine-->
# 스코프 scope  -->

class Gun:
    def __init__(self,name):
        self.__name=name
        self.__amo=10#30bullet per every magzine
        self.__maximum_range=1#1km
        self.__hit_ratio=100#per every 100 bullet
        self.__rpm=100 #rate of fire per min

    def reload(self,magazine):
        magazine.reloading(self)
        print(f'reloaded! amo  now  : {self.__amo}')

    def shooting(self):
        if self.__amo>0:
            self.__amo-=1
            print(f'lets burn ! amo  now  : {self.__amo}')
        else:
            print('please reload  Magazines')


    def equip(self,item):
        item.use(self)
        print(f'ratio changed !  now  maximum_range : {self.__maximum_range} km')

    def __repr__(self):
        return (f'{self.__name} (amo:{self.__amo} ,maximum_range: {self.__maximum_range} km'
                f',hit_ratio: {self.__hit_ratio} per 100 bullert, rpm: {self.__rpm} per min)'

    )

    #총알,사거리,명중률, 연사율 은 읽고 쓰고 다 하도록.    
    @property
    def amo(self):
        return self.__amo

    @amo.setter
    def amo(self,new_amo):
        self.__amo= new_amo

    @property
    def maximum_range(self):
        return self.__maximum_range

    @maximum_range.setter
    def maximum_range(self,new_maximum_range):
        self.__maximum_range= new_maximum_range

    @property
    def hit_ratio(self):
        return self.__hit_ratio

    @hit_ratio.setter
    def hit_ratio(self,new_hit_ratio):
        self.__hit_ratio= new_hit_ratio

    @property
    def rpm(self):
        return self.__rpm

    @rpm.setter
    def rpm(self,new_rpm):
        self.__rpm= new_rpm


    #이름은 읽기만 가능하도록 getter만 가지고 있다.
    @property
    def name(self):
        return self.__name




class Magazines:
    def reloading(self,gun):

        gun.amo+=30



class Scope:
    def use(self,gun):
        gun.maximum_range+=1
        gun.hit_ratio+=5
        gun.rpm-=5






```
