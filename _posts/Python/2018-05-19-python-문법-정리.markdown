---
layout: "post"
title: "Python 문법 정리"
categories:
 - Python
tags:
 - Python
 - 연산자 
 - 형변환 
 - list
 - tuple
 - set
 - mutable
 - sequence
 - print
 - input 
 - listcomprehension   
 - 파이썬 문법 
comments : true
date: "2018-05-19 18:50"
---



#### 수치형 연산자.
* x//y    정수나누기
* x**y  1x의 y승
* float(x)  실수변환
* pow(x,y)  x의 y승
* divmod(x,y)   (x//y, x%y) 동시에 구하기 ex) divmod(13,7) =(1,6)
* complex(re,im) 복소수 re+imj 생성
* c.conjugate()  c의 공액복소수  ex) c.conjugate() =(3-4j)

#### 논리연산자
* xory 논리합, x and y 논리곱, not x 부정

* 비트별 연산   
x|y    ex) 0011 |1100 = 1111  
x&y  ex)  0101&11000 = 0100  
x^y  ex)  1010 ^0101 = 1111  

#### 형변환 함수
* math.trunc(x) 절사   ex) math.trunc(3.9) = 3
* math.floor(x) 아래가까운정수 ex) math.floor(3.1)=3 ,  math.floor(-3.1)=4
* math.ceil(x)  위로 가까운정수 ex)  math.ceil (3.1)=4 ,math.ceil(-3.1)=-3
* round(x)  반올림

#### sequence type 연산자(문자열,튜플,리스트)
* 소속관계   
  x in s  
  x not in y

* 붙이기
s+t  
s*n  
* 추출         
s[i] s의 i 번 원소  
s[i:j]  s의 i~j-1번까지 원소  
s[i : j: k ] s의 i 에서 j-1 까지의 k간격으로 원소 추출  

* 원소조사  len(s)  
s의 길이  
min(s)  s의 최소크기의 원소  
max(s)  s의최대 크기 원소  
s.index((s) s 에서  x 값을 갖는 원소의 인덱스  
in  존재여부 확인 ex) 'red'in fruits  
s.count(x)  s에서 x값을 갖는 원소의 갯수  
zip(s1,s2,s3)--->sequence자료의 원소로 구성된 tuple들의 list 생성  

<pre>
여러 시퀀스 동시순회 (zip)
fruits = ['apple', 'banana', 'melon']
colors = ['red', 'yellow', 'green', 'purple']
for fruit, color in zip(fruits, colors):
  print('fruit:', fruit, ' color:', color)
</pre>

( 생성 인덱싱 동시가능 [1,2,3][1] =>>>2, 'string'[2]=>>'r' , (1,2,3)[0]=>>>1)

#### mutable sequence type 연산자(리스트)
  * s[i:j]  =t  s의 i ~j번 원소 이런식으로 교체 가능.
  * del s[i:j]  s의 i ~j번 원소 삭제
  * s.append(x)  s의 맨 마지막에 원소 x 값을 붙임 (리스트에 리스트 어펜드하면 리스트안에리스트.)
  * s.extend(t)    s의 맨 마지막에 리스트 t 를 붙임 (리스트에 리스트 익스텐드하면 합쳐진 리스트.)
  * s.index( x[, i, [ j ] ] ) s의 i 에서 j-1까지의 원소 중 x 값을 갖는 원소의 인덱스 반환
  * s.insert( i, x )   s의 i번째에 x를 삽입 (100번째 할당시 가장 끝으로)
  * s.pop( [ i ] )  s의 i 번째원소를 삭제하고 그 값을 반환 i를 생략하면 맨뒤 원소
  * s.remove(x)   s에서 x원소를 찾아 제거, 없으면 에러
  * s.reverse()     s의 모든 원소의 순서를 뒤집는다.( s[::-1]해도 같은값)
  * s.sort()     정렬(정렬만함. 값반환x)
  * s.sorted()  정렬( 정렬된 리스트 복사본 반환)

#### List, Tuple, String, Set,Dictionary 간의 간단한 변환방법.
* Tuple, Set,String-----list()-------------------->List
* List, String, Tuple----set()-------------------->Set
* Set. String, List------tuple()------------------>tuple
* List, set, Tuple-------str(), .join()------------->String (str 해버리면 괄호까지 문자열로들어감. join은 문자열로 바꾸려는 컨테이너안에 문자열이 있을때 한정인듯.
* Dictionary------------keys(), values(), items()------->List
* List-------------------zip(), dict()------------->Dictionary  (ex  k=dict(zip(a리스트,b리스트)))
* 딕셔너리만 왕따다.리스트만 놀아준다.  
딕셔너리에 이것저것 들어갈 수 있기는 하다.여기서 말하는것은 간단한 명령문으로.  
확인결과 튜플도 다음과정들 다 가능하다.(튜플로 키와 벨류된 사전을 키,밸류함수로 반환해보면 리스트 로감싸진 튜플나온다.)

####  List(문자열)  
* ''' ''' 여러줄쓰기
* " ' ' " 내부에 넣기
* '%d %f %s'  %(a,b,c)   포맷팅. %d 정수, %s 문자열, %f 부동소수  
(문자열 끼리 곱하기, 더하기 가능, 특정 인덱스참조값 변경불가)
* 함수
    * len(s) 길이
    * lower(),upper() 대소문자 변환
    * s.count('a'),s.find('a,b,c'),s.index('a') 글자찾기
    * a.join(s) 결합 ex)     ','.join(A리스트 )
    * s.split() 분해 ()안의 문자 기준 분해.  다붙어있으면 통으로 리스트되고 공백기준하고싶으면' ' 혹은 ()빈칸.
    * s.strip() 공백제거 --->확인해보기
    * s.rstrio() 오른쪽에서 공백제거
* 이스케이프 문자.  
  \t 탭(tab)  
  \n 줄바꿈  
  \\\(역슬래시) 입력  
  \'작은따옴표(') 입력  
  \"큰따옴표(") 입력  



#### Tuple
* 변경불가, 순서가 중요.( immutable, sequencd)
* 컴마만 넣어서 구분해도 튜플된다.    fruit= 'apple' ,'banana'
* 튜플 언패킹  a,b =( 'apple' ,'banana')




#### Dictionary
* index대신 key이용, {} 사용, 변경가능, 메핑(immuatable, mapping), 순서무관, key중복불가.
* d['two'] ='dos 더하기
* d['one']-->'uno' 호출
* d.keys(), d.values(). d.items() 각각 키,벨류 리스트, (키,밸류) 튜플로된 리스트 반환
* d.update(dd) 다른 사전 병합.
* del d [key] 하나 지우기.
* in으로 key검색.
* copy()

#### Set(집합)
순서무관/ 중복불가.---------------------------->중복없에는데 활용가능  
* 집합연산자	설명    
  - &	교집합(Intersection)  
  - 차집합(Difference)  
  * ^	대칭차집합(Exclusive)(합집합 -교집합)
  * <=	부분집합(Subset)
  * <	진부분집합(Proper subset)(자기자신 제외한 공집합({1,2,3}이면 1, 12,123 23 이런거.)



* s1.add(7) 추가
* s1.discard(3) 제거

#### 그밖에함수
range(n) 0~n-1 범위 정수리스트 생성
range(s,n) s에서 n-1까지 정수리스트 생성
-->추후에 아래로 빼주자.


#### print관련
* (origin way)
    * print "%3d %s %0.2f" % (a, 'ttt',b)    
* 변환타입	설명  
%s	문자열  
%d	10진수  
%x	16진수  
%o	8진수  
%f	10진 부동소수점수  
%e	지수로 나타낸 부동소수점수  
%g	10진 부동소수점수 혹은 지수로 나타낸 부동소수점수  
%%	리터럴 %  
* (format메소드)
    * print " {} {} {}". format(a, 'tt', b)  
(list ,tuple사용가능)  
c=[1,2,3]  
d=[3,4,5]  
print "{} ,{} ".format(c,d)  
(구체적 모델지정가능)  
print"{0:5d}, {1:7.5f}".format(a,b) // 7 전체자리수, 5소수점자리수  
  (list,tuple 일부항목지정가능)  
print "{0[1]} {0[2]}".format(d)  
(class의 멤버를 이름으로지정도 가능)  
* (f'{변수 또는 표현식}')  
기본 형태  
apple = '사과'  
banana = '바나나'  
f'{apple}는 맛있어 맛있으면 {banana} {banana}}'

#### 데이터입력 관련
* raw-input() 문자열입력
* input() 슷자입력
* raw_input( 'x,y,z입력:') ----->1,2,3 입력한다.
* L=s.split() 해서 여러숫자 한번에 입력 가능.

#### list comprehension
[해당 변수 로된식 for 변수 in 집합 if 조건]
* ex ) a=[x for x in range(1,11) if x%2==0]  
* ex2) 1~9수 대응하는 3승사전 만들기  
* d={x:x**3 for x in range(1,10)} (set comprehension)  
* ex3) 화면에 컴마로 구분된 3개수 받아들여 숫자로된 리스트.
* [float(x) for x in raw_input("3 num input").split(',')
* ex4)>hello 알파벳 중복없이 이뤄진 리스트
* list(set([c for c in 'hello']))
* list cmprehension 의 중첩 -->알아보기 힘들어서 포문주로 씀

<pre>
for color in colors:    
  for fruit in fruits:

[(color, fruit) for color in colors for fruit in fruits]    
</pre>







#### break확인 (else)
for문으로 데이터를 순회하던 중, break문이 호출되지 않고 반복문이 종료되면 else문이 실행된다.

<pre>
for 항목 in iterable객체:
  pass
else:
  break가 한 번도 호출되지 않았을 경우의 코드
</pre>        
